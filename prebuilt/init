#!/bin/sh -eu

# Should we try to recover from errors (rescue mode)? Or just reboot?
recover=1
# Should we print messages describing what we did or are attempting to do?
verbose=0

# An error occurred. Enable logging and print the message.
error() {
  verbose=1
  print "$@"
  test "${recover:-0}" -gt 0 && rescue
  print "Rebooting"
  sleep 5
  reboot -f
}

# Print a line of output for each argument, but only in verbose mode.
print() {
  test "${verbose:=0}" -ge 1 && printf '%s\n' "$@"
  return 0
}

# Prompt for a line of input, with optional timeout.
prompt() {
  input=
  timeout=
  test -n "${2-}" && timeout="-t ${2}"
  printf '%s' "${1-}"
  read -r $timeout input || true
  test -z "$input" && printf '\n'
  return 0
}

# Prompt for a single character of input, with a short timeout.
promptc() {
  input=
  timeout=1
  test -n "${2-}" && timeout=$2
  printf '%s' "$1"
  read -n 1 -r -t "$timeout" input || true
  printf '\n'
}

# Enter rescue mode: authenticate, drop to a shell, then retry boot.
rescue() {
  print "Entering rescue mode"
  getty -l sh -n 115200 "${console:-tty0}"
  print "Restarting /init"
  exec /init
}

export PATH=/bin
trap 'error "Unexpected error!"' EXIT HUP INT QUIT TERM

mountpoint -q /proc || mount -nt proc proc /proc
mountpoint -q /dev || mount -nt devtmpfs dev /dev
mountpoint -q /sys || mount -nt sysfs sys /sys

promptc "Press 'r' to enter rescue mode... "
test "$input" = "r" && rescue

print "Searching for ZFS pools"
# Returns success even with no pools found
zpool import -a -N 2>/dev/null
pool=$(zpool list -H -o name)
test -z "$pool" && error "No ZFS pool found!"
print "Imported ZFS pool '${pool}'"

bootfs=$(zpool get -H -o value bootfs "$pool")
kerneldir=
if test -z "$bootfs" || test "$bootfs" = "-"; then
  print "No bootfs, trying rootfs"
  bootfs=$(zfs list -H -o name "${pool}/rootfs" 2>/dev/null || true)
  kerneldir=/boot
fi
if test -z "$bootfs"; then
  print "No rootfs, falling back to top-level dataset"
  bootfs=$pool
  kerneldir=/boot
fi

if test "$(zfs get -H -o value encryption "$bootfs")" != "off"; then
  print "Unlocking encrypted /boot dataset"
  zfs load-key "$(zfs get -H -o value encryptionroot "$bootfs")"
fi

print "Mounting boot dataset '${bootfs}'"
mount -i -o ro -t zfs "$bootfs" /boot

kernel=$(ls -CLt1 "/boot${kerneldir}" | grep -F vmlinuz | head -n 1 || true)
test -z "$kernel" && error "No kernel image found!"
promptc "Selected default kernel '$kernel', press any key to override... "
if test -n "$input"; then
  print "Available kernels:"
  ls -l "/boot${kerneldir}" | grep -F vmlinuz
  prompt "> "
  kernel=$input
fi
print "Using kernel image '$kernel'"
cp "/boot${kerneldir}/${kernel}" /kernel

print "Reading kernel command line"
cmda=$(cat /proc/cmdline)
cmdb=$(cat "/boot${kerneldir}/cmdline${kernel#vmlinuz}" 2>/dev/null || true)

print "Exporting ZFS pool '${pool}'"
zpool export "$pool"

print "Generating second stage initramfs"
gen_init_cpio -t 0 /etc/initramfs.list > /initramfs

print "Setting boot mode"
nvramtool -w boot_option=Normal
nvramtool -w reboot_counter=0

print "Executing new kernel"
kexec -f -x -y --command-line="${cmda} ${cmdb}" --initrd=/initramfs /kernel
