STAGING = $(CURDIR)/staging
SYSHOST = $(CURDIR)/sysroot
SYSROOT = $(CURDIR)/sysroot/$(TARGET)
WORKDIR = $(CURDIR)/$(MODULE)-build

ARCH = $(firstword $(subst -, ,$(TARGET)))
ifeq ($(ARCH),x86_64)
MACHINE ?= sandybridge
endif

export PATH := $(SYSHOST)/bin:$(PATH)

CC  = $(TARGET)-gcc -fPIE -pie
CPP = $(CC) -E
CXX = $(TARGET)-g++ -fPIE -pie

COMMON_CFLAGS = \
    -fdata-sections \
    -ffunction-sections \
    -fno-common \
    -fno-exceptions \
    -fno-unwind-tables \
    -fomit-frame-pointer \
    -fstack-clash-protection \
    -fstack-protector-strong \
    -g0 \
    -march=$(MACHINE) \
    -mtune=$(MACHINE) \
    -Os \
    -Wa,--noexecstack \
    -Werror=implicit-function-declaration
COMMON_LDFLAGS = \
    -s \
    -Wl,--as-needed \
    -Wl,--gc-sections \
    -Wl,--hash-style=both \
    -Wl,--sort-section=alignment \
    -Wl,-z,noexecstack \
    -Wl,-z,now \
    -Wl,-z,relro

COMMON_FETCH_GIT = \
    git clone --bare $($(MODULE)_SOURCE) $($(MODULE)_LOCAL_SOURCE)
COMMON_FETCH_TAR = \
    wget -nv -O $($(MODULE)_LOCAL_SOURCE) $($(MODULE)_SOURCE)
COMMON_UNPACK_GIT = \
    git clone $($(MODULE)_LOCAL_SOURCE) $(WORKDIR) && \
    git -C $(WORKDIR) checkout -q $($(MODULE)_VERSION:git-%=%)
COMMON_UNPACK_TAR = \
    sha256sum -c hashes/$(notdir $($(MODULE)_LOCAL_SOURCE)).sha256 && \
    busybox tar xf $($(MODULE)_LOCAL_SOURCE) && \
    mv $(MODULE)-$($(MODULE)_VERSION) $(WORKDIR)
COMMON_PREPARE = \
    for f in $$(find -name config.sub); do cp ../tools/config.sub $$f; done; \
    for p in ../patches/$(MODULE)*; do if test -f "$$p"; then patch -p1 -i "$$p"; fi; done
COMMON_CONFIGURE = \
    ./configure CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" \
    CFLAGS="$(COMMON_CFLAGS) $($(MODULE)_CFLAGS)" LDFLAGS="$(COMMON_LDFLAGS) $($(MODULE)_LDFLAGS)" \
    CONFIG_SITE=../tools/config.site \
    --host=$(TARGET) \
    --prefix= --bindir=/bin --libdir=/lib --sbindir=/bin \
    --disable-nls --disable-rpath --enable-static --enable-shared \
    --with-pic
COMMON_COMPILE = \
    $(MAKE) CROSS_COMPILE="$(TARGET)-" CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" \
    CFLAGS="$(COMMON_CFLAGS) $($(MODULE)_CFLAGS)" LDFLAGS="$(COMMON_LDFLAGS) $($(MODULE)_LDFLAGS)"
COMMON_INSTALL = \
    $(COMMON_COMPILE) DESTDIR="$(SYSROOT)" PREFIX= prefix= install

busybox_VERSION = 1.31.1
busybox_SOURCE = http://busybox.net/downloads/busybox-$(busybox_VERSION).tar.bz2
busybox_CONFIGURE = \
    cp ../tools/busybox.config .config
busybox_INSTALL = \
    install -m0755 busybox $(SYSROOT)/bin
busybox_BINS = busybox

coreboot_VERSION = git-4.10
coreboot_SOURCE = https://review.coreboot.org/coreboot
coreboot_CFLAGS = \
    -DCMOS_HAL=1 \
    -I.
coreboot_CONFIGURE = \
    true
coreboot_COMPILE = \
    $(COMMON_COMPILE) -C util/cbmem && \
    $(COMMON_COMPILE) -C util/nvramtool
coreboot_INSTALL = \
    $(COMMON_INSTALL) -C util/cbmem && \
    $(COMMON_INSTALL) -C util/nvramtool
coreboot_BINS = cbmem nvramtool

eudev_VERSION = 3.2.9
eudev_SOURCE = https://dev.gentoo.org/~blueness/eudev/eudev-$(eudev_VERSION).tar.gz
eudev_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --disable-blkid \
    --disable-introspection \
    --disable-kmod \
    --disable-manpages \
    --disable-mtd_probe \
    --disable-selinux
eudev_BINS = udevadm udevd
eudev_LIBS = libudev.so.1

flashrom_VERSION = v1.1
flashrom_SOURCE = https://download.flashrom.org/releases/flashrom-$(flashrom_VERSION).tar.bz2
flashrom_CONFIGURE = \
    true
flashrom_COMPILE = \
    $(COMMON_COMPILE) CONFIG_INTERNAL=yes CONFIG_NOTHING=yes
flashrom_INSTALL = \
    install -m0755 flashrom $(SYSROOT)/bin
flashrom_BINS = flashrom

kexec-tools_VERSION = 2.0.20
kexec-tools_SOURCE = https://www.kernel.org/pub/linux/utils/kernel/kexec/kexec-tools-$(kexec-tools_VERSION).tar.xz
kexec-tools_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --without-lzma \
    --without-xen \
    --without-zlib
kexec-tools_COMPILE = \
    $(MAKE)
kexec-tools_BINS = kexec

libaio_VERSION = 0.3.112
libaio_SOURCE = http://ftp.debian.org/debian/pool/main/liba/libaio/libaio_$(libaio_VERSION).orig.tar.xz
libaio_CFLAGS = \
    -fPIC \
    -I.
libaio_CONFIGURE = \
    true

libtirpc_VERSION = git-d918e41d88985a083f9a0acbd2062d4178d2a0f4
libtirpc_SOURCE = git://linux-nfs.org/~steved/libtirpc
libtirpc_PREPARE = \
    $(COMMON_PREPARE) && \
    mkdir tirpc/sys && \
    cp ../tools/queue.h tirpc/sys && \
    ./bootstrap
libtirpc_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --disable-authdes \
    --disable-gssapi \
    --disable-ipv6 \
    --disable-shared \
    --disable-symvers

linux_VERSION = 5.3.11
linux_SOURCE = https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$(linux_VERSION).tar.xz
linux_CONFIGURE = \
    $(MAKE) ARCH=$(ARCH) CROSS_COMPILE=$(TARGET)- defconfig
linux_COMPILE = \
    $(MAKE) ARCH=$(ARCH) CROSS_COMPILE=$(TARGET)- usr
linux_INSTALL = \
    install -m0755 usr/gen_init_cpio $(SYSHOST)/bin && \
    install -m0755 usr/gen_initramfs_list.sh $(SYSHOST)/bin/gen_initramfs_list

lvm2_VERSION = 2.03.06
lvm2_SOURCE = https://mirrors.kernel.org/sourceware/lvm2/LVM2.$(lvm2_VERSION).tgz
lvm2_UNPACK = \
    sha256sum -c hashes/$(notdir $($(MODULE)_LOCAL_SOURCE)).sha256 && \
    tar xf $($(MODULE)_LOCAL_SOURCE) && \
    mv LVM2.$($(MODULE)_VERSION) $(WORKDIR)
lvm2_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --disable-readline \
    --enable-static_link \
    --with-cache=none \
    --with-thin=none \
    --with-vdo=none
lvm2_COMPILE = \
    $(COMMON_COMPILE) lib.device-mapper
lvm2_INSTALL = \
    $(COMMON_INSTALL:install=install_include install_pkgconfig install_static) -C libdm

musl_VERSION = git-90251cf73dfdd44e7a3f085d236e89a7dff1b00b
musl_SOURCE = git://git.musl-libc.org/musl
musl_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --enable-warnings
musl_LIBS = ld-musl-$(ARCH).so.1

ncurses_VERSION = 6.1
ncurses_SOURCE = https://invisible-mirror.net/archives/ncurses/ncurses-$(ncurses_VERSION).tar.gz
ncurses_CFLAGS = \
    -D_GNU_SOURCE
ncurses_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --disable-database \
    --disable-db-install \
    --disable-gnat-projects \
    --disable-home-terminfo \
    --disable-rpath-hack \
    --disable-termcap \
    --enable-overwrite \
    --enable-pc-files \
    --enable-warnings \
    --enable-widec \
    --with-cxx \
    --with-fallbacks=linux \
    --with-normal \
    --without-ada \
    --without-curses-h \
    --without-cxx-binding \
    --without-develop \
    --without-gpm \
    --without-manpages \
    --without-progs \
    --without-shared \
    --without-termlib

openssl_VERSION = 1.1.1d
openssl_SOURCE = https://www.openssl.org/source/openssl-$(openssl_VERSION).tar.gz
openssl_CONFIGURE = \
    env CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" \
    ./Configure --prefix=/ linux-$(ARCH) shared \
    no-async no-ct no-des no-ec no-engine no-hw no-ocsp no-sock no-ssl no-threads no-tls no-ui-console no-zlib \
    $(COMMON_CFLAGS) $($(MODULE)_CFLAGS) $(COMMON_LDFLAGS) $($(MODULE)_LDFLAGS)
openssl_LIBS = libcrypto.so.1.1 libssl.so.1.1

pciutils_VERSION = 3.6.2
pciutils_SOURCE = https://www.kernel.org/pub/software/utils/pciutils/pciutils-$(pciutils_VERSION).tar.xz
pciutils_CONFIGURE = \
    true
pciutils_COMPILE = \
    $(COMMON_COMPILE) DNS=no HWDB=no IDSDIR=/ LIBKMOD=no SHARED=no ZLIB=no
pciutils_INSTALL = \
    $(COMMON_INSTALL) STRIP= install-lib

petitboot_VERSION = v1.10.4
petitboot_SOURCE = https://github.com/open-power/petitboot/releases/download/$(petitboot_VERSION)/petitboot-$(petitboot_VERSION).tar.gz
# HOST_PROG_CRYPTSETUP
# HOST_PROG_DMIDECODE
# HOST_PROG_SCSI_RESCAN
# HOST_PROG_SFTP
# HOST_PROG_SHUTDOWN
# HOST_PROG_VGCHANGE
# HOST_PROG_VGSCAN
petitboot_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --disable-crypt \
    --disable-mtd \
    --disable-platform-auto \
    --disable-static \
    --enable-busybox \
    --enable-hard-lockdown \
    --with-ncursesw \
    --with-signed-boot=openssl \
    --with-tftp=busybox \
    --without-fdt \
    --without-ncurses \
    --without-twin-fbdev \
    --without-twin-x11 \
    VERIFY_DIGEST=sha256 \
    HOST_PROG_CP=/bin/cp \
    HOST_PROG_IP=/bin/ip \
    HOST_PROG_KEXEC=/bin/kexec \
    HOST_PROG_MOUNT=/bin/mount \
    HOST_PROG_PB_EXEC=/bin/pb-exec \
    HOST_PROG_PB_PLUGIN=/bin/pb-plugin \
    HOST_PROG_SH=/bin/sh \
    HOST_PROG_TFTP=/bin/tftp \
    HOST_PROG_UDHCPC=/bin/udhcpc \
    HOST_PROG_UDHCPC6=/bin/udhcpc6 \
    HOST_PROG_UMOUNT=/bin/umount \
    HOST_PROG_WGET=/bin/wget
petitboot_BINS = pb-config pb-discover pb-event pb-exec pb-plugin pb-sos pb-udhcpc petitboot-nc

util-linux_VERSION = 2.34
util-linux_SOURCE = https://www.kernel.org/pub/linux/utils/util-linux/v2.34/util-linux-$(util-linux_VERSION).tar.xz
util-linux_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --disable-all-programs \
    --disable-assert \
    --disable-bash-completion \
    --without-btrfs \
    --disable-libfdisk \
    --disable-libmount \
    --disable-libsmartcols \
    --disable-widechar \
    --enable-libblkid \
    --enable-libuuid \
    --without-audit \
    --without-cap-ng \
    --without-libz \
    --without-ncurses \
    --without-ncursesw \
    --without-python \
    --without-readline \
    --without-slang \
    --without-smack \
    --without-systemd \
    --without-tinfo \
    --without-udev \
    --without-user \
    --without-utempter \
    --without-util
util-linux_LIBS = libblkid.so.1 libuuid.so.1

zfs_VERSION = 0.8.2
zfs_SOURCE = https://github.com/zfsonlinux/zfs/releases/download/zfs-$(zfs_VERSION)/zfs-$(zfs_VERSION).tar.gz
zfs_CONFIGURE = \
    $(COMMON_CONFIGURE) \
    --disable-systemd \
    --disable-sysvinit \
    --enable-linux-builtin \
    --with-config=user \
    --with-mounthelperdir=/bin \
    --with-tirpc \
    --without-python \
    ac_cv_header_libudev_h=no \
    ac_cv_search_udev_device_get_is_initialized=no
zfs_BINS = zfs zpool
zfs_LIBS = libnvpair.so.1 libuutil.so.1 libzfs.so.2 libzfs_core.so.1

zlib_VERSION = 1.2.11
zlib_SOURCE = http://zlib.net/zlib-$(zlib_VERSION).tar.xz
zlib_CONFIGURE = \
    CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" \
    CFLAGS="$(COMMON_CFLAGS) $($(MODULE)_CFLAGS)" LDFLAGS="$(COMMON_LDFLAGS) $($(MODULE)_LDFLAGS)" \
    ./configure \
    --prefix= \
    --const
zlib_LIBS = libz.so.1

ifneq ($(findstring git,$($(MODULE)_VERSION)),)
$(MODULE)_LOCAL_SOURCE = sources/$(MODULE).git
else
$(MODULE)_LOCAL_SOURCE = sources/$(notdir $($(MODULE)_SOURCE))
endif

ifeq ($($(MODULE)_FETCH),)
ifneq ($(findstring git,$($(MODULE)_VERSION)),)
$(MODULE)_FETCH = $(COMMON_FETCH_GIT)
else
$(MODULE)_FETCH = $(COMMON_FETCH_TAR)
endif
endif
ifeq ($($(MODULE)_UNPACK),)
ifneq ($(findstring git,$($(MODULE)_VERSION)),)
$(MODULE)_UNPACK = $(COMMON_UNPACK_GIT)
else
$(MODULE)_UNPACK = $(COMMON_UNPACK_TAR)
endif
endif
ifeq ($($(MODULE)_PREPARE),)
$(MODULE)_PREPARE = $(COMMON_PREPARE)
endif
ifeq ($($(MODULE)_CONFIGURE),)
$(MODULE)_CONFIGURE = $(COMMON_CONFIGURE)
endif
ifeq ($($(MODULE)_COMPILE),)
$(MODULE)_COMPILE = $(COMMON_COMPILE)
endif
ifeq ($($(MODULE)_INSTALL),)
$(MODULE)_INSTALL = $(COMMON_INSTALL)
endif

all: $(WORKDIR)/.staged
fetch: $($(MODULE)_LOCAL_SOURCE)
unpack: $(WORKDIR)/.unpacked
prepare: $(WORKDIR)/.prepared
configure: $(WORKDIR)/.configured
compile: $(WORKDIR)/.compiled
install: $(WORKDIR)/.installed
stage: $(WORKDIR)/.staged

$($(MODULE)_LOCAL_SOURCE):
	$($(MODULE)_FETCH)

$(WORKDIR)/.unpacked: $($(MODULE)_LOCAL_SOURCE)
	$($(MODULE)_UNPACK)
	touch $@

$(WORKDIR)/.prepared: $(WORKDIR)/.unpacked
	cd $(WORKDIR) && $($(MODULE)_PREPARE)
	touch $@

$(WORKDIR)/.configured: sysroot $(WORKDIR)/.prepared
	cd $(WORKDIR) && $($(MODULE)_CONFIGURE)
	touch $@

$(WORKDIR)/.compiled: $(WORKDIR)/.configured
	+cd $(WORKDIR) && $($(MODULE)_COMPILE)
	touch $@

$(WORKDIR)/.installed: $(WORKDIR)/.compiled
	+cd $(WORKDIR) && $($(MODULE)_INSTALL)
	find $(SYSROOT) -name '*.la' -delete
	touch $@

$(WORKDIR)/.staged: $(WORKDIR)/.installed
	for b in $($(MODULE)_BINS); do install -m0755 "$(SYSROOT)/bin/$${b}" "$(STAGING)/bin"; done
	for l in $($(MODULE)_LIBS); do install -m0755 "$(SYSROOT)/lib/$${l}" "$(STAGING)/lib"; done
	touch $@
